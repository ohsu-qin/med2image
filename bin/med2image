#!/usr/bin/env python
import os
import sys
import argparse
import med2image
from med2image._common import systemMisc as misc


def main():
    # The required input file argument.
    inputLocation, opts = _parse_arguments()
    manOpt = opts.pop('man', None)
    synopsisOpt = opts.pop('synopsis', None)
    if manOpt or synopsisOpt:
        if manOpt:
            str_help = synopsis(False)
        else:
            str_help = synopsis(True)
        print(str_help)
        sys.exit(0)

    # Convert the image.
    verbose = opts.pop('verbose', None)
    misc.tic()
    med2image.run(inputLocation, **opts)
    if verbose:
        print("Elapsed time = %f seconds" % misc.toc())
    sys.exit(0)


EPILOG = """
If an 'm' is specified for the slice or frame to convert, then only
the middle slice or frame in the input volume is converted.

If the input location can be a file or a directory. Currently, only
directories with DICOM files are supported. If the location is a file
without a file extension, then the <inputFileType> must be specified. 

For DICOM data, the <outputFileStem> can include DICOM tag
substitutions in the form %(<tag>), e.g.:

    -o '%(PatientID)-%(ProtocolName)'

See https://github.com/FNNDSC/med2image for more information.
"""

def _parse_arguments():
    parser = argparse.ArgumentParser(
        description="Converts a medical image file to a conventional"
                    " display format such as JPEG.",
        epilog = EPILOG,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument("input", help="input file or directory")
    parser.add_argument("-o", "--outputFileStem", metavar="NAME",
                        help="output file name")
    parser.add_argument("-d", "--destination", metavar="DIR",
                        help="output image directory"
                             " (default current directory)")
    parser.add_argument("-i", "--inputFileType", metavar="TYPE",
                        help="input image type ('dcm' or 'nii')")
    parser.add_argument("-t", "--outputFileType", metavar="TYPE",
                        help="output image type")
    parser.add_argument("-s", "--sliceToConvert", metavar="SLICE",
                        help="slice to convert (for 3D data)")
    parser.add_argument("-f", "--frameToConvert", metavar="FRAME",
                        help="frame to convert (for 4D data)")
    parser.add_argument('-r', '--reslice',
                        help="save images along i,j,k directions (3D data only)",
                        action='store_true')
    parser.add_argument("-v", "--verbose", help="print program run time",
                        action='store_true')
    args = vars(parser.parse_args())

    nonempty_args = dict((k, v) for k, v in args.iteritems() if v != None)
    return nonempty_args.pop('input', None), nonempty_args


if __name__ == '__main__':
	main()

